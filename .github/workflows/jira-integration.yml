name: Jira Integration

on:
  pull_request:
    types: [opened, closed, reopened, ready_for_review, converted_to_draft]

permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  update-jira:
    runs-on: ubuntu-latest
    steps:
      - name: Extract Jira Ticket ID
        id: extract
        run: |
          BRANCH_NAME="${{ github.head_ref }}"
          echo "Branch: $BRANCH_NAME"

          TICKET_ID=$(echo "$BRANCH_NAME" | grep -oE 'KAN-[0-9]+' | head -1)

          if [ -z "$TICKET_ID" ]; then
            PR_TITLE="${{ github.event.pull_request.title }}"
            TICKET_ID=$(echo "$PR_TITLE" | grep -oE 'KAN-[0-9]+' | head -1)
          fi

          if [ -z "$TICKET_ID" ]; then
            echo "No Jira ticket found"
            echo "ticket_id=" >> $GITHUB_OUTPUT
            exit 0
          fi

          echo "Found ticket: $TICKET_ID"
          echo "ticket_id=$TICKET_ID" >> $GITHUB_OUTPUT

      - name: Get Ticket Info
        if: steps.extract.outputs.ticket_id != ''
        id: ticket-info
        run: |
          TICKET_ID="${{ steps.extract.outputs.ticket_id }}"
          
          # Get current ticket status
          RESPONSE=$(curl -s \
            -u "${{ secrets.JIRA_EMAIL }}:${{ secrets.JIRA_API_TOKEN }}" \
            -H "Accept: application/json" \
            "${{ secrets.JIRA_BASE_URL }}/rest/api/3/issue/$TICKET_ID")
          
          if [ $? -ne 0 ]; then
            echo "Failed to get ticket info"
            exit 1
          fi
          
          CURRENT_STATUS=$(echo "$RESPONSE" | jq -r '.fields.status.name')
          echo "Current status: $CURRENT_STATUS"
          echo "current_status=$CURRENT_STATUS" >> $GITHUB_OUTPUT

          # Get available transitions
          TRANSITIONS=$(curl -s \
            -u "${{ secrets.JIRA_EMAIL }}:${{ secrets.JIRA_API_TOKEN }}" \
            -H "Accept: application/json" \
            "${{ secrets.JIRA_BASE_URL }}/rest/api/3/issue/$TICKET_ID/transitions")
          
          echo "Available transitions:"
          echo "$TRANSITIONS" | jq -r '.transitions[] | "\(.id) - \(.name) -> \(.to.name)"'
          
          {
            echo "transitions<<EOF"
            echo "$TRANSITIONS"
            echo "EOF"
          } >> $GITHUB_OUTPUT

      - name: Update Jira Status
        if: steps.extract.outputs.ticket_id != ''
        run: |
          TICKET_ID="${{ steps.extract.outputs.ticket_id }}"
          CURRENT_STATUS="${{ steps.ticket-info.outputs.current_status }}"
          PR_ACTION="${{ github.event.action }}"
          IS_MERGED="${{ github.event.pull_request.merged }}"
          IS_DRAFT="${{ github.event.pull_request.draft }}"
          PR_URL="${{ github.event.pull_request.html_url }}"
          
          echo "PR Action: $PR_ACTION"
          echo "Current Status: $CURRENT_STATUS"
          echo "Is Merged: $IS_MERGED"
          echo "Is Draft: $IS_DRAFT"
          
          # Determine target status
          TARGET_STATUS=""
          COMMENT=""
          
          if [ "$PR_ACTION" = "opened" ] || [ "$PR_ACTION" = "reopened" ]; then
            if [ "$IS_DRAFT" = "true" ]; then
              TARGET_STATUS="In Progress"
              COMMENT="Draft PR created: $PR_URL"
            else
              TARGET_STATUS="In Review"
              COMMENT="PR opened for review: $PR_URL"
            fi
          elif [ "$PR_ACTION" = "ready_for_review" ]; then
            TARGET_STATUS="In Review"
            COMMENT="PR ready for review: $PR_URL"
          elif [ "$PR_ACTION" = "converted_to_draft" ]; then
            TARGET_STATUS="In Progress"
            COMMENT="PR converted to draft: $PR_URL"
          elif [ "$PR_ACTION" = "closed" ]; then
            if [ "$IS_MERGED" = "true" ]; then
              TARGET_STATUS="Done"
              COMMENT="PR merged: $PR_URL"
            else
              TARGET_STATUS="To Do"
              COMMENT="PR closed without merge: $PR_URL"
            fi
          fi
          
          echo "Target Status: $TARGET_STATUS"
          
          if [ -z "$TARGET_STATUS" ]; then
            echo "No target status determined"
            exit 0
          fi
          
          # Skip if already in target status
          if [ "$CURRENT_STATUS" = "$TARGET_STATUS" ]; then
            echo "Already in target status: $TARGET_STATUS"
            exit 0
          fi
          
          # Find transition ID
          TRANSITIONS='${{ steps.ticket-info.outputs.transitions }}'
          
          # Try exact match first
          TRANSITION_ID=$(echo "$TRANSITIONS" | jq -r ".transitions[] | select(.to.name == \"$TARGET_STATUS\") | .id")
          
          # Try alternative names if not found
          if [ -z "$TRANSITION_ID" ] || [ "$TRANSITION_ID" = "null" ]; then
            case "$TARGET_STATUS" in
              "In Review")
                TRANSITION_ID=$(echo "$TRANSITIONS" | jq -r '.transitions[] | select(.to.name | test("Review|REVIEW")) | .id' | head -1)
                ;;
              "In Progress") 
                TRANSITION_ID=$(echo "$TRANSITIONS" | jq -r '.transitions[] | select(.to.name | test("Progress|PROGRESS|Development|DEVELOPMENT")) | .id' | head -1)
                ;;
              "Done")
                TRANSITION_ID=$(echo "$TRANSITIONS" | jq -r '.transitions[] | select(.to.name | test("Done|DONE|QA|Resolved|RESOLVED")) | .id' | head -1)
                ;;
              "To Do")
                TRANSITION_ID=$(echo "$TRANSITIONS" | jq -r '.transitions[] | select(.to.name | test("To Do|TODO|Backlog|BACKLOG")) | .id' | head -1)
                ;;
            esac
          fi
          
          if [ -z "$TRANSITION_ID" ] || [ "$TRANSITION_ID" = "null" ]; then
            echo "No transition found to: $TARGET_STATUS"
            echo "Available transitions:"
            echo "$TRANSITIONS" | jq -r '.transitions[] | "  \(.name) -> \(.to.name)"'
            exit 0
          fi
          
          echo "Using transition ID: $TRANSITION_ID"
          
          # Execute transition
          curl -s -X POST \
            -u "${{ secrets.JIRA_EMAIL }}:${{ secrets.JIRA_API_TOKEN }}" \
            -H "Content-Type: application/json" \
            "${{ secrets.JIRA_BASE_URL }}/rest/api/3/issue/$TICKET_ID/transitions" \
            -d "{\"transition\": {\"id\": \"$TRANSITION_ID\"}}"
          
          if [ $? -eq 0 ]; then
            echo "Successfully updated ticket status"
          else
            echo "Failed to update ticket status"
          fi
          
          # Add comment
          curl -s -X POST \
            -u "${{ secrets.JIRA_EMAIL }}:${{ secrets.JIRA_API_TOKEN }}" \
            -H "Content-Type: application/json" \
            "${{ secrets.JIRA_BASE_URL }}/rest/api/3/issue/$TICKET_ID/comment" \
            -d "{\"body\": {\"type\": \"doc\", \"version\": 1, \"content\": [{\"type\": \"paragraph\", \"content\": [{\"type\": \"text\", \"text\": \"$COMMENT\"}]}]}}"
          
          echo "Added comment to ticket"

      - name: Add PR Comment
        if: steps.extract.outputs.ticket_id != '' && github.event.action == 'opened'
        uses: actions/github-script@v7
        continue-on-error: true
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const ticketId = '${{ steps.extract.outputs.ticket_id }}';
            const jiraUrl = `${{ secrets.JIRA_BASE_URL }}/browse/${ticketId}`;
            
            try {
              const comment = `üé´ **Jira Ticket**: [${ticketId}](${jiraUrl})
            
            This PR is linked to Jira ticket ${ticketId}. Status updates are automated:
            - üîç PR opened ‚Üí "In Review"
            - ‚úÖ PR merged ‚Üí "Done/QA" 
            - ‚ùå PR closed ‚Üí "To Do"`;
            
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            
              console.log('‚úÖ Added Jira link to PR');
            } catch (error) {
              console.log('‚ö†Ô∏è Could not add PR comment (permissions):', error.message);
              console.log('The Jira integration still works - this is just cosmetic');
            }