name: Jira Integration

on:
  pull_request:
    types: [opened, closed, reopened, ready_for_review, converted_to_draft]
    branches: [main, develop, master]

permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  update-jira:
    runs-on: ubuntu-latest
    steps:
      - name: Extract Jira Ticket ID
        id: extract
        run: |
          # Extract branch name from PR
          BRANCH_NAME="${{ github.head_ref }}"
          echo "üîç Branch: $BRANCH_NAME"

          # Extract ticket ID (e.g., KAN-123 from feature/KAN-123-description)
          TICKET_ID=$(echo "$BRANCH_NAME" | grep -oE 'KAN-[0-9]+' | head -1)

          # If not found in branch, try PR title
          if [ -z "$TICKET_ID" ]; then
            PR_TITLE="${{ github.event.pull_request.title }}"
            TICKET_ID=$(echo "$PR_TITLE" | grep -oE 'KAN-[0-9]+' | head -1)
            echo "üîç Checking PR title: $PR_TITLE"
          fi

          # If not found, try PR body
          if [ -z "$TICKET_ID" ]; then
            PR_BODY="${{ github.event.pull_request.body }}"
            TICKET_ID=$(echo "$PR_BODY" | grep -oE 'KAN-[0-9]+' | head -1)
            echo "üîç Checking PR body"
          fi

          if [ -z "$TICKET_ID" ]; then
            echo "‚ö†Ô∏è No Jira ticket ID found in branch name, PR title, or PR body"
            echo "üí° Use branch pattern: feature/KAN-123-description"
            echo "ticket_id=" >> $GITHUB_OUTPUT
            exit 0
          fi

          echo "‚úÖ Extracted Ticket ID: $TICKET_ID"
          echo "ticket_id=$TICKET_ID" >> $GITHUB_OUTPUT

      - name: Validate Secrets
        if: steps.extract.outputs.ticket_id != ''
        run: |
          if [ -z "${{ secrets.JIRA_EMAIL }}" ]; then
            echo "‚ùå JIRA_EMAIL secret is missing"
            echo "Add it at: https://github.com/${{ github.repository }}/settings/secrets/actions"
            exit 1
          fi
          
          if [ -z "${{ secrets.JIRA_API_TOKEN }}" ]; then
            echo "‚ùå JIRA_API_TOKEN secret is missing"
            echo "Add it at: https://github.com/${{ github.repository }}/settings/secrets/actions"
            exit 1
          fi
          
          if [ -z "${{ secrets.JIRA_BASE_URL }}" ]; then
            echo "‚ùå JIRA_BASE_URL secret is missing"
            echo "Add it at: https://github.com/${{ github.repository }}/settings/secrets/actions"
            exit 1
          fi
          
          echo "‚úÖ All required secrets are present"

      - name: Get Current Ticket Status
        if: steps.extract.outputs.ticket_id != ''
        id: current-status
        run: |
          TICKET_ID="${{ steps.extract.outputs.ticket_id }}"
          
          echo "üîç Getting current status for $TICKET_ID"
          
          # Get current ticket info
          RESPONSE=$(curl -s -w "HTTPSTATUS:%{http_code}" \
            -u "${{ secrets.JIRA_EMAIL }}:${{ secrets.JIRA_API_TOKEN }}" \
            -H "Accept: application/json" \
            "${{ secrets.JIRA_BASE_URL }}/rest/api/3/issue/$TICKET_ID")
          
          # Extract HTTP status and body
          HTTP_STATUS=$(echo "$RESPONSE" | grep -o "HTTPSTATUS:[0-9]*" | cut -d: -f2)
          BODY=$(echo "$RESPONSE" | sed -E 's/HTTPSTATUS:[0-9]*$//')
          
          echo "üìä HTTP Status: $HTTP_STATUS"
          
          if [ "$HTTP_STATUS" -ne 200 ]; then
            echo "‚ùå Failed to get ticket info (HTTP $HTTP_STATUS)"
            echo "Response: $BODY"
          
            if [ "$HTTP_STATUS" -eq 404 ]; then
              echo "üí° Ticket $TICKET_ID doesn't exist or you don't have access"
            elif [ "$HTTP_STATUS" -eq 401 ]; then
              echo "üí° Authentication failed - check your JIRA_EMAIL and JIRA_API_TOKEN"
            fi
            exit 1
          fi
          
          # Extract current status
          CURRENT_STATUS=$(echo "$BODY" | jq -r '.fields.status.name')
          TICKET_SUMMARY=$(echo "$BODY" | jq -r '.fields.summary')
          
          echo "üìã Ticket: $TICKET_SUMMARY"
          echo "üìä Current Status: $CURRENT_STATUS"
          echo "current_status=$CURRENT_STATUS" >> $GITHUB_OUTPUT

      - name: Get Available Transitions
        if: steps.extract.outputs.ticket_id != ''
        id: transitions
        run: |
          TICKET_ID="${{ steps.extract.outputs.ticket_id }}"
          
          echo "üîÑ Getting available transitions for $TICKET_ID"
          
          # Get available transitions
          RESPONSE=$(curl -s -w "HTTPSTATUS:%{http_code}" \
            -u "${{ secrets.JIRA_EMAIL }}:${{ secrets.JIRA_API_TOKEN }}" \
            -H "Accept: application/json" \
            "${{ secrets.JIRA_BASE_URL }}/rest/api/3/issue/$TICKET_ID/transitions")
          
          # Extract HTTP status and body
          HTTP_STATUS=$(echo "$RESPONSE" | grep -o "HTTPSTATUS:[0-9]*" | cut -d: -f2)
          BODY=$(echo "$RESPONSE" | sed -E 's/HTTPSTATUS:[0-9]*$//')
          
          if [ "$HTTP_STATUS" -ne 200 ]; then
            echo "‚ùå Failed to get transitions (HTTP $HTTP_STATUS)"
            echo "Response: $BODY"
            exit 1
          fi
          
          echo "Available transitions:"
          echo "$BODY" | jq -r '.transitions[] | "  \(.id) - \(.name) ‚Üí \(.to.name)"'
          
          # Store transitions for later use
          echo "transitions=$BODY" >> $GITHUB_OUTPUT

      - name: Update Jira Ticket Status
        if: steps.extract.outputs.ticket_id != ''
        run: |
          TICKET_ID="${{ steps.extract.outputs.ticket_id }}"
          CURRENT_STATUS="${{ steps.current-status.outputs.current_status }}"
          PR_URL="${{ github.event.pull_request.html_url }}"
          PR_STATE="${{ github.event.action }}"
          PR_MERGED="${{ github.event.pull_request.merged }}"
          PR_DRAFT="${{ github.event.pull_request.draft }}"

          echo "üéØ PR Event: $PR_STATE"
          echo "üìä Current Status: $CURRENT_STATUS"
          echo "üìù Is Draft: $PR_DRAFT"
          echo "üîó Is Merged: $PR_MERGED"

          # Determine target status based on PR action
          case "$PR_STATE" in
            "opened"|"reopened")
              if [ "$PR_DRAFT" = "true" ]; then
                TARGET_STATUSES=("IN PROGRESS" "In Progress" "DEVELOPMENT" "Development" "DOING" "Doing")
                COMMENT="üìù Draft Pull Request created: $PR_URL"
                EVENT_DESC="Draft PR opened"
              else
                TARGET_STATUSES=("IN REVIEW" "In Review" "REVIEW" "Review" "CODE REVIEW" "Code Review" "IN PR" "In PR" "PENDING REVIEW" "Pending Review")
                COMMENT="üîç Pull Request opened for review: $PR_URL"
                EVENT_DESC="PR opened for review"
              fi
              ;;
            "ready_for_review")
              TARGET_STATUSES=("IN REVIEW" "In Review" "REVIEW" "Review" "CODE REVIEW" "Code Review" "IN PR" "In PR" "PENDING REVIEW" "Pending Review")
              COMMENT="üîç Pull Request ready for review: $PR_URL"
              EVENT_DESC="PR ready for review"
              ;;
            "converted_to_draft")
              TARGET_STATUSES=("IN PROGRESS" "In Progress" "DEVELOPMENT" "Development" "DOING" "Doing")
              COMMENT="üìù Pull Request converted to draft: $PR_URL"
              EVENT_DESC="PR converted to draft"
              ;;
            "closed")
              if [ "$PR_MERGED" = "true" ]; then
                TARGET_STATUSES=("DONE" "Done" "QA" "Ready for QA" "QA READY" "TESTING" "Testing" "RESOLVED" "Resolved" "COMPLETED" "Completed" "CLOSED" "Closed")
                COMMENT="‚úÖ Pull Request merged: $PR_URL - Ready for QA!"
                EVENT_DESC="PR merged"
              else
                TARGET_STATUSES=("TO DO" "To Do" "TODO" "BACKLOG" "Backlog" "OPEN" "Open" "IN PROGRESS" "In Progress")
                COMMENT="‚ùå Pull Request closed without merging: $PR_URL"
                EVENT_DESC="PR closed without merge"
              fi
              ;;
            *)
              echo "‚ÑπÔ∏è Unknown PR state: $PR_STATE - skipping transition"
              exit 0
              ;;
          esac

          echo "üéØ Target statuses: ${TARGET_STATUSES[*]}"

          # Get transitions JSON
          TRANSITIONS='${{ steps.transitions.outputs.transitions }}'

          # Find matching transition ID
          TRANSITION_ID=""
          MATCHED_STATUS=""
          for status in "${TARGET_STATUSES[@]}"; do
            ID=$(echo "$TRANSITIONS" | jq -r ".transitions[] | select(.to.name==\"$status\") | .id")
            if [ -n "$ID" ] && [ "$ID" != "null" ]; then
              TRANSITION_ID=$ID
              MATCHED_STATUS=$status
              echo "‚úÖ Found transition: $status (ID: $ID)"
              break
            fi
          done

          # Check if we're already in the target status
          for status in "${TARGET_STATUSES[@]}"; do
            if [ "$CURRENT_STATUS" = "$status" ]; then
              echo "‚ÑπÔ∏è Ticket is already in target status: $CURRENT_STATUS"
              echo "üéØ Event: $EVENT_DESC"
              # Still add comment even if no transition needed
              TRANSITION_ID="SKIP_TRANSITION"
              break
            fi
          done

          # Apply transition if found
          if [ -n "$TRANSITION_ID" ] && [ "$TRANSITION_ID" != "SKIP_TRANSITION" ]; then
            echo "üîÑ Transitioning from '$CURRENT_STATUS' to '$MATCHED_STATUS' (ID: $TRANSITION_ID)"

            # Update ticket status
            TRANSITION_RESPONSE=$(curl -s -w "HTTPSTATUS:%{http_code}" \
              -u "${{ secrets.JIRA_EMAIL }}:${{ secrets.JIRA_API_TOKEN }}" \
              -H "Content-Type: application/json" \
              -X POST \
              "${{ secrets.JIRA_BASE_URL }}/rest/api/3/issue/$TICKET_ID/transitions" \
              -d "{\"transition\": {\"id\": \"$TRANSITION_ID\"}}")

            # Extract HTTP status
            HTTP_STATUS=$(echo "$TRANSITION_RESPONSE" | grep -o "HTTPSTATUS:[0-9]*" | cut -d: -f2)
            BODY=$(echo "$TRANSITION_RESPONSE" | sed -E 's/HTTPSTATUS:[0-9]*$//')

            if [ "$HTTP_STATUS" -eq 204 ]; then
              echo "‚úÖ Successfully transitioned ticket to '$MATCHED_STATUS'"
            else
              echo "‚ùå Failed to transition ticket (HTTP $HTTP_STATUS)"
              echo "Response: $BODY"
            fi
          elif [ "$TRANSITION_ID" = "SKIP_TRANSITION" ]; then
            echo "‚è≠Ô∏è Skipping transition - already in correct status"
          else
            echo "‚ö†Ô∏è No matching transition found for target statuses: ${TARGET_STATUSES[*]}"
            echo "Available transitions:"
            echo "$TRANSITIONS" | jq -r '.transitions[] | "  \(.name) ‚Üí \(.to.name)"'
          fi

          # Add comment to Jira ticket
          echo "üí¨ Adding comment to ticket..."
          COMMENT_RESPONSE=$(curl -s -w "HTTPSTATUS:%{http_code}" \
            -u "${{ secrets.JIRA_EMAIL }}:${{ secrets.JIRA_API_TOKEN }}" \
            -H "Content-Type: application/json" \
            -X POST \
            "${{ secrets.JIRA_BASE_URL }}/rest/api/3/issue/$TICKET_ID/comment" \
            -d "{
              \"body\": {
                \"type\": \"doc\",
                \"version\": 1,
                \"content\": [
                  {
                    \"type\": \"paragraph\",
                    \"content\": [
                      {
                        \"type\": \"text\",
                        \"text\": \"$COMMENT\"
                      }
                    ]
                  }
                ]
              }
            }")

          # Extract HTTP status for comment
          COMMENT_HTTP_STATUS=$(echo "$COMMENT_RESPONSE" | grep -o "HTTPSTATUS:[0-9]*" | cut -d: -f2)

          if [ "$COMMENT_HTTP_STATUS" -eq 201 ]; then
            echo "‚úÖ Successfully added comment to ticket"
          else
            echo "‚ö†Ô∏è Failed to add comment (HTTP $COMMENT_HTTP_STATUS)"
            echo "This doesn't affect the transition"
          fi

      - name: Add PR Comment with Jira Link
        if: steps.extract.outputs.ticket_id != '' && github.event.action == 'opened'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const ticketId = '${{ steps.extract.outputs.ticket_id }}';
            const jiraUrl = `${{ secrets.JIRA_BASE_URL }}/browse/${ticketId}`;

            try {
              // Check if we already commented
              const comments = await github.rest.issues.listComments({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo
              });

              const alreadyCommented = comments.data.some(comment =>
                comment.body.includes(`[${ticketId}]`)
              );

              if (!alreadyCommented) {
                const comment = `üé´ **Jira Ticket**: [${ticketId}](${jiraUrl})

This PR is automatically linked to Jira ticket ${ticketId}. Status updates will be synchronized:
  - üìù Draft PR ‚Üí "In Progress"
  - üîç Ready for Review ‚Üí "In Review"
  - ‚úÖ Merged ‚Üí "QA/Done"
  - ‚ùå Closed ‚Üí "To Do"`;
    
    await github.rest.issues.createComment({
    issue_number: context.issue.number,
    owner: context.repo.owner,
    repo: context.repo.repo,
    body: comment
  });
    
    console.log('‚úÖ Added Jira link comment to PR');
  } else {
    console.log('‚ÑπÔ∏è Jira link comment already exists on PR');
  }
  } catch (error) {
    console.log('‚ö†Ô∏è Could not add PR comment:', error.message);
    console.log('This is not critical - the Jira integration still works');
  }

  - name: Summary
    if: always()
    run: |
      TICKET_ID="${{ steps.extract.outputs.ticket_id }}"
        
      if [ -z "$TICKET_ID" ]; then
          echo "‚ÑπÔ∏è No Jira ticket detected in this PR"
          echo "üí° To enable automation, use branch naming like: feature/KAN-123-description"
        else
          echo "‚úÖ Jira integration completed for ticket $TICKET_ID"
          echo "üîó View ticket: ${{ secrets.JIRA_BASE_URL }}/browse/$TICKET_ID"
        fi