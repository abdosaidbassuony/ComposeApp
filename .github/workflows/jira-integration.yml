name: Jira Integration

on:
  pull_request:
    types: [opened, closed, reopened]
    branches: [main, develop, master]

jobs:
  update-jira:
    runs-on: ubuntu-latest
    steps:
      - name: Extract Jira Ticket ID
        id: extract
        run: |
          # Extract branch name from PR
          BRANCH_NAME="${{ github.head_ref }}"
          echo "Branch: $BRANCH_NAME"

          # Extract ticket ID (e.g., KAN-123 from feature/KAN-123-description)
          TICKET_ID=$(echo "$BRANCH_NAME" | grep -oE 'KAN-[0-9]+' | head -1)

          if [ -z "$TICKET_ID" ]; then
            echo "No Jira ticket ID found in branch name"
            echo "ticket_id=" >> $GITHUB_OUTPUT
            exit 0
          fi

          echo "Extracted Ticket ID: $TICKET_ID"
          echo "ticket_id=$TICKET_ID" >> $GITHUB_OUTPUT

      - name: Get Jira Transitions
        if: steps.extract.outputs.ticket_id != ''
        id: transitions
        run: |
          TICKET_ID="${{ steps.extract.outputs.ticket_id }}"

          # Check if JIRA_AUTH is set
          if [ -z "${{ secrets.JIRA_AUTH }}" ]; then
            echo "‚ùå JIRA_AUTH secret is not configured"
            echo "Please add JIRA_AUTH secret to your repository settings"
            exit 1
          fi

          # Get available transitions for the ticket
          RESPONSE=$(curl -s -X GET \
            -H "Authorization: Basic ${{ secrets.JIRA_AUTH }}" \
            -H "Accept: application/json" \
            "https://abdo-said.atlassian.net/rest/api/3/issue/$TICKET_ID/transitions")

          # Check if we got an error response
          if echo "$RESPONSE" | jq -e '.errorMessages' > /dev/null 2>&1; then
            echo "‚ùå Error getting transitions:"
            echo "$RESPONSE" | jq '.errorMessages'
            exit 1
          fi

          echo "Available transitions:"
          echo "$RESPONSE" | jq '.transitions[] | {id: .id, name: .name}'

          # Store transitions for later use
          echo "transitions<<EOF" >> $GITHUB_OUTPUT
          echo "$RESPONSE" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Update Jira Ticket Status
        if: steps.extract.outputs.ticket_id != ''
        run: |
          TICKET_ID="${{ steps.extract.outputs.ticket_id }}"
          PR_URL="${{ github.event.pull_request.html_url }}"
          PR_STATE="${{ github.event.action }}"
          PR_MERGED="${{ github.event.pull_request.merged }}"

          echo "PR State: $PR_STATE, Merged: $PR_MERGED"

          # Determine target status based on PR action
          if [ "$PR_STATE" = "opened" ] || [ "$PR_STATE" = "reopened" ]; then
            # Try both uppercase and mixed case variations
            TARGET_STATUSES=("IN REVIEW" "In Review" "IN PR" "In PR" "CODE REVIEW" "Code Review" "REVIEW" "Review")
            COMMENT="üîç Pull Request opened for review: $PR_URL"
          elif [ "$PR_STATE" = "closed" ] && [ "$PR_MERGED" = "true" ]; then
            TARGET_STATUSES=("QA READY" "QA" "Ready for QA" "TESTING" "Testing" "DONE" "Done" "RESOLVED" "Resolved")
            COMMENT="‚úÖ Pull Request merged: $PR_URL"
          elif [ "$PR_STATE" = "closed" ] && [ "$PR_MERGED" = "false" ]; then
            TARGET_STATUSES=("TO DO" "To Do" "TODO" "BACKLOG" "Backlog" "OPEN" "Open" "REOPENED" "Reopened" "IN PROGRESS" "In Progress")
            COMMENT="‚ùå Pull Request closed without merging: $PR_URL"
          else
            echo "Unknown PR state: $PR_STATE"
            exit 0
          fi

          # Get transitions JSON
          TRANSITIONS='${{ steps.transitions.outputs.transitions }}'

          # Find matching transition ID (case-insensitive)
          TRANSITION_ID=""
          FOUND_NAME=""

          echo "Looking for transitions matching: ${TARGET_STATUSES[*]}"

          for status in "${TARGET_STATUSES[@]}"; do
            # Try exact match first
            ID=$(echo "$TRANSITIONS" | jq -r ".transitions[] | select(.name==\"$status\") | .id")
            if [ ! -z "$ID" ] && [ "$ID" != "null" ]; then
              TRANSITION_ID=$ID
              FOUND_NAME="$status"
              echo "Found exact match: $status (ID: $ID)"
              break
            fi

            # Try case-insensitive match
            ID=$(echo "$TRANSITIONS" | jq -r ".transitions[] | select(.name | ascii_downcase == \"$(echo "$status" | tr '[:upper:]' '[:lower:]')\") | .id")
            if [ ! -z "$ID" ] && [ "$ID" != "null" ]; then
              TRANSITION_ID=$ID
              FOUND_NAME=$(echo "$TRANSITIONS" | jq -r ".transitions[] | select(.id==\"$ID\") | .name")
              echo "Found case-insensitive match: $FOUND_NAME (ID: $ID)"
              break
            fi
          done

          # Apply transition if found
          if [ ! -z "$TRANSITION_ID" ]; then
            echo "Transitioning to: $FOUND_NAME (ID: $TRANSITION_ID)"

            # Update ticket status
            TRANSITION_RESPONSE=$(curl -s -w "\nHTTP_STATUS:%{http_code}" -X POST \
              -H "Authorization: Basic ${{ secrets.JIRA_AUTH }}" \
              -H "Content-Type: application/json" \
              "https://abdo-said.atlassian.net/rest/api/3/issue/$TICKET_ID/transitions" \
              -d "{\"transition\": {\"id\": \"$TRANSITION_ID\"}}")

            HTTP_STATUS=$(echo "$TRANSITION_RESPONSE" | grep "HTTP_STATUS:" | cut -d: -f2)
            RESPONSE_BODY=$(echo "$TRANSITION_RESPONSE" | sed '/HTTP_STATUS:/d')

            if [ "$HTTP_STATUS" -ge 200 ] && [ "$HTTP_STATUS" -lt 300 ]; then
              echo "‚úÖ Successfully updated ticket status to: $FOUND_NAME"
            else
              echo "‚ö†Ô∏è Failed to update ticket status (HTTP $HTTP_STATUS)"
              echo "Response: $RESPONSE_BODY"
            fi
          else
            echo "‚ö†Ô∏è No matching transition found"
            echo "Tried to find: ${TARGET_STATUSES[*]}"
            echo "Available transitions are:"
            echo "$TRANSITIONS" | jq -r '.transitions[] | "  - \(.name) (ID: \(.id))"'
          fi

          # Add comment to Jira ticket
          echo "Adding comment to ticket..."
          COMMENT_RESPONSE=$(curl -s -w "\nHTTP_STATUS:%{http_code}" -X POST \
            -H "Authorization: Basic ${{ secrets.JIRA_AUTH }}" \
            -H "Content-Type: application/json" \
            "https://abdo-said.atlassian.net/rest/api/3/issue/$TICKET_ID/comment" \
            -d "{
              \"body\": {
                \"type\": \"doc\",
                \"version\": 1,
                \"content\": [
                  {
                    \"type\": \"paragraph\",
                    \"content\": [
                      {
                        \"type\": \"text\",
                        \"text\": \"$COMMENT\"
                      }
                    ]
                  }
                ]
              }
            }")

          HTTP_STATUS=$(echo "$COMMENT_RESPONSE" | grep "HTTP_STATUS:" | cut -d: -f2)

          if [ "$HTTP_STATUS" -ge 200 ] && [ "$HTTP_STATUS" -lt 300 ]; then
            echo "‚úÖ Successfully added comment to ticket"
          else
            echo "‚ö†Ô∏è Failed to add comment (HTTP $HTTP_STATUS)"
          fi

      - name: Add PR Comment
        if: steps.extract.outputs.ticket_id != '' && github.event.action == 'opened'
        uses: actions/github-script@v6
        with:
          script: |
            const ticketId = '${{ steps.extract.outputs.ticket_id }}';
            const jiraUrl = `https://abdo-said.atlassian.net/browse/${ticketId}`;

            // Check if we already added a comment
            const comments = await github.rest.issues.listComments({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo
            });

            const alreadyCommented = comments.data.some(comment =>
              comment.body.includes(`Jira Ticket: [${ticketId}]`)
            );

            if (!alreadyCommented) {
              const comment = `üîó **Jira Ticket:** [${ticketId}](${jiraUrl})

              This PR is linked to Jira ticket ${ticketId}. Status updates will be synchronized automatically.`;

              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            }